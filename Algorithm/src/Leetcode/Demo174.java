package Leetcode;

import java.util.Arrays;

/*
174. 地下城游戏
一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。

骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。

有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。

为了尽快到达公主，骑士决定每次只向右或向下移动一步。



编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。

例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。

-2 (K)	-3	3
-5	-10	1
10	30	-5 (P)


说明:


任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。
 */
public class Demo174 {
    public int calculateMinimumHP(int[][] dungeon) {
        /*
        因为只能向下或向右走，所以i，j位置的最小值，由i+1，j和i，j+1相关
        取最小值之后，把当前格子要扣的血加上就是当前位置的最小值
        如果当前格子计算完为负，就证明到这个格子只有1血就可以过

        遍历顺序：
        ^  ^  ^
        |  |  |
        |  |  |
        |  |  |
        3  2  1
        dp(i,j) = min(dp(i+1,j),dp(i,j+1))-dungeon(i,j)    结果大于0
                = 1  上面结果小于0

        dp(i,j) =   max(  min(dp(i+1,j),dp(i,j+1))-dungeon(i,j) , 1)
         */
        int m = dungeon.length, n = dungeon[0].length;
        int[][] dp = new int[m + 1][n + 1];
        //填充边界
        for (int i = 0; i <= m; i++) {
            if (i != m) dp[i][n] = Integer.MAX_VALUE;
            else Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        //右下角设初值
        dp[m][n - 1] = dp[m - 1][n] = 1;

        //先列后行
        for (int j = n - 1; j >= 0; j--) {
            for (int i = m - 1; i >= 0; i--) {
                dp[i][j] = Math.max(Math.min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1);
            }
        }
        return dp[0][0];
    }
}
