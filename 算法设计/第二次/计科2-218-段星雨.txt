8	
	1）题目
		判断s字符串是否为"回文"字符串
	2）思路
		首先录入字符串，然后使用for循环遍历一半的字符串，依次比较前后对应字符，然后输出结果
	3）伪代码
		void reverseString() {
			input(string[100]);
			for i = 0 to stringLength / 2 do
				if (string[i] != string[stringLength - 1 - i]) then
				{
					print("s不为回文串");
					return;
				}
			print("s为回文串");
		}
	4）源代码
		#include <stdio.h>
		#include <string.h>
		void reverseString() {
			printf("请输入字符串\n");
			char string[100];
			scanf("%s", string);
			int stringLength = strlen(string);
			for (int i = 0; i < stringLength / 2; i++)
				if (string[i] != string[stringLength - 1 - i])
				{
					printf("s不为回文串");
					return;
				}
			printf("s为回文串");
		}
		int main() {
			reverseString();
		}
		
16	
	1）题目
		编写算法对输人的一个整数，判断它能否被4,7,9整除,并输出以下信息之一：
		能同时被4,7,9整除;
		能被其中两个数(要指出哪两个)整除;
		能被其中一个数(要指出哪一个) 整除;
		不能被4,7,9任-一个整除。
	2）思路
		使用s进行计数，能被4,7,6整除分别用2^0,2^1,2^2进行记录，并加到s上，最后根据s的值进行输出
	3）伪代码
		void divide() {
			input(n);
			s = 0;
			if (n mod 4 == 0) then s += 1;
			if (n mod 7 == 0) then s += 2;
			if (n mod 9 == 0) then s += 4;
			switch (s)
			{
			case 7: print("能被4,7,9整除\n"); break;
			case 6: print("能被7,9整除\n"); break;
			case 5: print("能被4,9整除\n"); break;
			case 4: print("能被9整除\n"); break;
			case 3: printf("能被4,7整除\n"); break;
			case 2: print("能被7整除\n"); break;
			case 1: print("能被4整除\n"); break;
			case 0: print("不能能被4,7,9整除\n"); break;
			}
		}
	4）源代码
		#include <stdio.h>
		void divide() {
			printf("请输入n\n");
			int n;
			scanf("%d", &n);
			int s = 0;
			if (n % 4 == 0)
				s += 1;
			if (n % 7 == 0)
				s += 2;
			if (n % 9 == 0)
				s += 4;
			switch (s)
			{
			case 7:
				printf("能被4,7,9整除\n");
				break;
			case 6:
				printf("能被7,9整除\n");
				break;
			case 5:
				printf("能被4,9整除\n");
				break;
			case 4:
				printf("能被9整除\n");
				break;
			case 3:
				printf("能被4,7整除\n");
				break;
			case 2:
				printf("能被7整除\n");
				break;
			case 1:
				printf("能被4整除\n");
				break;
			case 0:
				printf("不能能被4,7,9整除\n");
				break;
			}
		}
		int main() {
			divide();
		}
18	
	1）题目
		求这样的两个数据: 5位数=2*4位数,9个数字互不相同。
	2）思路
		for循环遍历所有满足的数，然后进入判断函数。在判断函数中设计标记数组，然后比较是否有相同数字
		最后输出结果
	3）伪代码
		void findNum() {
			for i = 10000 / 2 to 9999 do
			{
				fourNum = i, fiveNum = i * 2;
				if (sameNum(fourNum + fiveNum * 10000) == 1) then
					print(fourNum, fiveNum);}
		}
		int sameNum(n) {
			flag[10] = { 0,0,0,0,0,0,0,0,0,0 };
			while (n != 0) do
			{
				tem = n mod 10;
				if (flag[tem] == 1) then return 0;
				flag[tem] = 1;
				n /= 10;}
			return 1;}
	4）源代码
		#include <stdio.h>
		void findNum() {
			printf("这样组合数为\n");
			for (int i = 10000 / 2; i <= 9999; i++)
			{
				int fourNum = i, fiveNum = i * 2;
				if (sameNum(fourNum + fiveNum * 10000) == 1)
					printf("%d,%d\n", fourNum, fiveNum);
			}
		}
		int sameNum(int n) {
			int flag[10] = { 0,0,0,0,0,0,0,0,0,0 };
			while (n != 0)
			{
				int tem = n % 10;
				if (flag[tem] == 1)
					return 0;
				flag[tem] = 1;
				n /= 10;
			}
			return 1;
		}
		int main() {
			findNum();
		}
23	
	1）题目
		输入一个5位数以内的正整数,完成以下操作:
		①判断它是一个几位数。
		②请按序输出其各位数字。
		③逆序输出其各位数字。
	2）思路
		首先for循环将所有的数字储存在数组中，循序次数就是数的位数，然后正序或倒序输出数组即可得到结果
	3）伪代码
		void textNum() {
			input(n);
			num[5], count = 0, i;
			for i = 0 to n != 0 do
			{
				num[i] = n mod 10;
				n /= 10;}
			count = i;
			print("位数为", count);
			print("正序输出为 ");
			for i = count - 1 to 0 do print(num[i]);
			print("\n逆序输出为 ");
			for i = 0 to count do print(num[i]);
		}
	4）源代码
		#include <stdio.h>
		void textNum() {
			printf("请输入n\n");
			int num[5];
			int n, count, i;
			scanf("%d", &n);
			for (i = 0; n != 0; i++)
			{
				num[i] = n % 10;
				n /= 10;
			}
			count = i;
			printf("位数为%d\n", count);
			printf("正序输出为 ");
			for (i = count - 1; i >= 0; i--)
				printf("%d ", num[i]);
			printf("\n逆序输出为 ");
			for (i = 0; i < count; i++)
				printf("%d ", num[i]);
		}
		int main() {
			textNum();
		}
25	
	1）题目
		乘式还原，有乘法运算如下。
					OOO
				  ×  OO
			    ---------
				   OOOO
				  OOOO
				---------
				  OOOOO
		式中18个O位置上的数字全部是素数(2,3,5或7)，请还原这算式。
	2）思路
		首先先用for三重for循环组合出三位数的乘数，然后用4个质数去常识乘法的两个中间结果是否满足题意，
		最后判断最终结果即可得出结论
	3）伪代码
		int prime[4] = { 2,3,5,7 };

		int isPrime(n) {
			//判断n每一位是否全为质数,若是返回1，若不是返回0
			while (n != 0) do
			{
				pop = n mod 10;
				flag = 0;
				for i = 0 to 4 do
					if (prime[i] == pop) then
					{
						flag = 1;
						break;}
				if (flag == 0) then return 0;
				flag = 0;
				n /= 10;}
			return 1;}
			
		void multiplication(threeLenMultiplier) {
			//用两位数的乘数每一位去判断中间结果是否满足条件
			twoLenMultiplierLast = 0;//个位
			twoLenMultiplierHead = 0;//十位
			for i = 0 to 4 do
			{
				twoLenMultiplierLast = prime[i];
				//个位满足
				if ( 个位满足结果) then
					for j = 0 to 4 do
					{
						twoLenMultiplierHead = prime[j];
						//十位满足，结果满足
						if (十位和结果满足条件) then 输出结果;}
			}
		}
		void multiplication_Restore_With_Prime() {
			//计算3位的乘数
			int threeLenMultiplier = 0;//三位乘数
			for i = 0 to 4 do
			{
				threeLenMultiplier += prime[i];
				for j = 0 to 4 do
				{
					threeLenMultiplier = threeLenMultiplier * 10 + prime[j];
					for  k = 0 to 4 do 
					{
						threeLenMultiplier = threeLenMultiplier * 10 + prime[k];
						multiplication(threeLenMultiplier);
						threeLenMultiplier /= 10;}
					threeLenMultiplier /= 10;}
				threeLenMultiplier = 0;}
		}
	4）源代码
		#include <stdio.h>

		int prime[4] = { 2,3,5,7 };

		int isPrime(int n) {
			//判断n每一位是否全为质数
			while (n != 0)
			{
				int pop = n % 10;
				int flag = 0;
				for (int i = 0; i < 4; i++)
					if (prime[i] == pop)
					{
						flag = 1;
						break;
					}
				if (flag == 0)
					return 0;
				flag = 0;
				n /= 10;
			}
			return 1;
		}
		void multiplication(int threeLenMultiplier) {
			//用两位数的乘数每一位去判断中间结果是否满足条件
			int twoLenMultiplierLast = 0;//个位
			int twoLenMultiplierHead = 0;//十位
			for (int i = 0; i < 4; i++)
			{
				twoLenMultiplierLast = prime[i];
				//个位满足
				if (isPrime(twoLenMultiplierLast * threeLenMultiplier) == 1 &&
					(twoLenMultiplierLast * threeLenMultiplier) / 1000 > 0)
					for (int j = 0; j < 4; j++)
					{
						twoLenMultiplierHead = prime[j];
						//十位满足，结果满足
						if ((twoLenMultiplierHead * threeLenMultiplier) / 1000 > 0 &&
							isPrime(twoLenMultiplierHead * threeLenMultiplier) == 1 &&
							isPrime(threeLenMultiplier * (twoLenMultiplierLast + twoLenMultiplierHead * 10)) &&
							(threeLenMultiplier * (twoLenMultiplierLast + twoLenMultiplierHead * 10)) / 10000 > 0)

						{
							printf("结果为：\n");
							printf("   %d \n", threeLenMultiplier);
							printf(" × %d \n", twoLenMultiplierLast + twoLenMultiplierHead * 10);
							printf("-------\n");
							printf("  %d \n", twoLenMultiplierLast * threeLenMultiplier);
							printf(" %d  \n", twoLenMultiplierHead * threeLenMultiplier);
							printf("-------\n");
							printf(" %d \n\n", threeLenMultiplier * (twoLenMultiplierLast + twoLenMultiplierHead * 10));
						}
					}
			}
		}
		void multiplication_Restore_With_Prime() {
			//计算3位的乘数
			int threeLenMultiplier = 0;//三位乘数
			for (int i = 0; i < 4; i++)
			{
				threeLenMultiplier += prime[i];
				for (int j = 0; j < 4; j++)
				{
					threeLenMultiplier = threeLenMultiplier * 10 + prime[j];
					for (int k = 0; k < 4; k++)
					{
						threeLenMultiplier = threeLenMultiplier * 10 + prime[k];
						multiplication(threeLenMultiplier);
						threeLenMultiplier /= 10;
					}
					threeLenMultiplier /= 10;
				}
				threeLenMultiplier = 0;
			}
		}
		int main() {
			multiplication_Restore_With_Prime();
		}