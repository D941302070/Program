8.
题目：判断s字符串是否为"回文"字符串
思路：使用for循环遍历输出s字符串的一半，前一半与后一半逆序进行对比，相同则为回文
伪代码：void reverseString() {
			input(string[100]);
			for i = 0 to length / 2 do
				if (string[i] != string[length - 1 - i]) then
				{
					print("s不是回文串");
					return;
				}
			print("s为回文串");
		}
源代码：#include <stdio.h>
		#include <string.h> 
		void reverseString() {
			printf("请输入字符串s\n");
			char string[100];
			scanf("%s", string);
			int length = strlen(string);
			for (int i = 0; i < length / 2; i++)
				if (string[i] != string[length - 1 - i])
				{
					printf("s不是回文串");
					return;
				}
			printf("s为回文串");
		}
		int main() {
			reverseString();
		}
		
16.
题目：编写算法对输人的一个整数，判断它能否被4,7,9整除,并输出以下信息之一：
	  能同时被4,7,9整除;
	  能被其中两个数(要指出哪两个)整除;
	  能被其中一个数(要指出哪一个) 整除;
	  不能被4,7,9任-一个整除。
思路：设定两个数组，一个存储4,7,9，一个用来标记n是否能被4,7,9整除，能整除的设为1，不能则为0，然后依次判断n是否能被整除，及时更改标记数组，最后输出
伪代码：void method() {
			input(n);
			for i = 0 to 2 do
				if (n被当前数整除)then
				{
					标记数组对应元素被标记;
					count++;//记录个数
				}
			判断情况，并输出情况;
		}
源代码：
		#include <stdio.h>
		void method() {
			int n;
			int num[3] = { 4,7,9 };
			int flag[3] = { 0,0,0 };
			int count = 0;
			printf("请输入n\n");
			scanf("%d", &n);
			for (int i = 0; i < 3; i++)
				if (n%num[i]==0)
				{
					flag[i] = 1;
					count++;
				}
			if (count == 3) printf("能同时被4,7,9整除\n");
			if (count == 0) printf("不能被任一个数整除\n");
			if (count < 3 && count>0) {
				printf("可以被%d个数整除,分别是",count);
				for (int i = 0; i < 3; i++)
					if (flag[i]==1)
						printf(" %d ", num[i]);
			}
		}
		int main()
		{
			method();
		}
		
18.
题目：求这样的两个数据: 5位数=2*4位数,9个数字互不相同。
思路：
伪代码：#include<stdio.h>
		int panbie(x,y)
		{
			a[10] = { 0 };
			for i = 0 to 4 do
			{
				n= x % 10;
				a[n]++;
				x = x/ 10;
			}
			for i = 0 to 3 do
			{
				n = y % 10;
				a[n]++;
				y = y/ 10;
			}
		 
			for i = 0 to 9 do
			if (a[i] >= 2) then
				return 0;
			return 1;
		 
		}
		 
		int main()
		{
			int wu, si,i;
			for wu = 10000 to 100000 do
			for si = 1000 to 10000 do
				if (wu == (2 * si)) then
				{
					i = panbie(wu, si);
					if (i == 1) then
						print(wu, si);
				}
		 
			}
			return 0;
		}
源代码：#include<stdio.h>
		#include<stdlib.h>
		#include<math.h>
		int panbie(int x, int y)
		{
			int i, n;
			int a[10] = { 0 };
			for (i = 0; i <= 4; i++)
			{
				n= x % 10;
				a[n]++;
				x = x/ 10;
			}
			for (i = 0; i <= 3; i++)
			{
				n = y % 10;
				a[n]++;
				y = y/ 10;
			}
		 
			for (i = 0; i <= 9;i++)
			if (a[i] >= 2)
				return 0;
			return 1;
		 
		}
		 
		int main()
		{
			int wu, si,i;
			for (wu = 10000; wu < 100000;wu++)
			for (si = 1000; si < 10000; si++)
			{
				if (wu == (2 * si))
				{
					i = panbie(wu, si);
					if (i == 1)
						printf("%d=2*%d\n", wu, si);
				}
		 
			}
			return 0;
		}
23.
题目：
	输入一个5位数以内的正整数,完成以下操作:
	①判断它是一个几位数。
	②请按序输出其各位数字。
	③逆序输出其各位数字。
思路：使用for循环将所有遍历数字并将其存储在数组中,找到位数，最后输出结果
伪代码：void textNum() {
			input(n);
			num[5], digit = 0, i;
			for i = 0 to n != 0 do
			{
				num[i] = n mod 10;
				n /= 10;}
			digit = i;
			print("位数为", digit);
			print("正序输出为 ");
			for i = digit - 1 to 0 do print(num[i]);
			print("\n逆序输出为 ");
			for i = 0 to digit do print(num[i]);
		}
源代码：#include <stdio.h>
		#include <string.h>
		void find() {
			printf("请输入n\n");
			int num[5];
			int n, digit, i;
			scanf("%d", &n);
			for (i = 0; n != 0; i++)
			{
				num[i] = n % 10;
				n /= 10;
			}
			digit = i;
			printf("位数为%d\n", digit);
			printf("正序输出为 ");
			for (i = digit - 1; i >= 0; i--)
				printf("%d ", num[i]);
			printf("\n逆序输出为 ");
			for (i = 0; i < digit; i++)
				printf("%d ", num[i]);
		}
		int main() {
			find();
		}
25.
题目：乘式还原，有乘法运算如下。
			    OOO
			  ×  OO
		     ---------
			   OOOO
			 OOOO
			 ---------
			 OOOOO
      式中18个O位置上的数字全部是素数(2,3,5或7)，请还原这算式
思路： 分别组合两个乘数，然后验证得出答案
伪代码：
		int isPrime(n) {
			while (n != 0) do
			{
				pop = n mod 10;
				flag = 0;
				for i = 0 to 4 do
					if (prime[i] == pop) then
					{
						flag = 1;
						break;}
				if (flag == 0) then return 0;
				flag = 0;
				n /= 10;
			}
			return 1;
		}
		int main() {
			san = 0;
			for i = 0 to 4 do
			{
				san += prime[i];
				for j = 0 to 4 do
				{
					san = san * 10 + prime[j];
					for k = 0 to 4 do
					{
						san = san * 10 + prime[k];
						int ergewei = 0;//个位
						int ershiwei = 0;//十位
						for i = 0 to 4 do
						{
							ergewei = prime[i];
							if (isPrime(ergewei * san) == 1 &&
								(ergewei * san) / 1000 > 0) then
								for j = 0 to 4 do
								{
									ershiwei = prime[j];
									if ((ershiwei * san) / 1000 > 0 &&
										isPrime(ershiwei * san) == 1 &&
										isPrime(san * (ergewei + ershiwei * 10)) &&
										(san * (ergewei + ershiwei * 10)) / 10000 > 0) then

									{
										输出;
									}
								}
						}
						san /= 10;
					}
					san /= 10;
				}
				san = 0;
			}
		}
源代码：
		#include<stdio.h> 
		int prime[4] = { 2,3,5,7 };
		int isPrime(int n) {
			while (n != 0)
			{
				int yu = n % 10;
				int flag = 0;
				for (int i = 0; i < 4; i++)
					if (prime[i] == yu)
					{
						flag = 1;
						break;
					}
				if (flag == 0)
					return 0;
				flag = 0;
				n /= 10;
			}
			return 1;
		}
		int main() {
			int san = 0;
			for (int i = 0; i < 4; i++)
			{
				san += prime[i];
				for (int j = 0; j < 4; j++)
				{
					san = san * 10 + prime[j];
					for (int k = 0; k < 4; k++)
					{
						san = san * 10 + prime[k];
						int ergewei = 0;//个位
						int ershiwei = 0;//十位
						for (int i = 0; i < 4; i++)
						{
							ergewei = prime[i];
							if (isPrime(ergewei * san) == 1 &&
								(ergewei * san) / 1000 > 0)
								for (int j = 0; j < 4; j++)
								{
									ershiwei = prime[j];
									if ((ershiwei * san) / 1000 > 0 &&
										isPrime(ershiwei * san) == 1 &&
										isPrime(san * (ergewei + ershiwei * 10)) &&
										(san * (ergewei + ershiwei * 10)) / 10000 > 0)

									{
										printf("结果为：\n");
										printf("   %d \n", san);
										printf(" × %d \n", ergewei + ershiwei * 10);
										printf("-------\n");
										printf("  %d \n", ergewei * san);
										printf(" %d  \n", ershiwei * san);
										printf("-------\n");
										printf(" %d \n\n", san * (ergewei + ershiwei * 10));
									}
								}
						}
						san /= 10;
					}
					san /= 10;
				}
				san = 0;
			}
		}