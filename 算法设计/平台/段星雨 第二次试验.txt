1.	
	1）试验题目
		残缺棋盘是一个有2^kX2^k. (k≥1)个方格的棋盘，其中恰有一个方格残缺。下图给出k=1时各种可能的残缺棋盘，其中残缺的方格用阴影表示。”
		图中的棋盘称作“三格板”，残缺棋盘问题就是用这四种三格板覆盖更大的残缺棋盘。在覆盖中要求:
			1)两个三格板不能重叠
			2)三格板不能覆盖残缺方格，但必须覆盖其他所有方格
			编程求k=3时的残缺棋盘覆盖方法。
	2）试验要求
		1)两个三格板不能重叠
		2)三格板不能覆盖残缺方格，但必须覆盖其他所有方格
	3）实验目的
		编程求k=3时的残缺棋盘覆盖方法
	4）思路分析
		可以使用分治法来分割棋盘，当棋盘分到很小是则可以进行填充
	5）伪代码
		void cover(tr,tc,size,dr,dc)
		{
			if (size < 2) then return;
			s = size / 2;
			if (dr < (tr + s) && dc < (tc + s)) then
			{
				count++;
				bord[tr + s - 1][tc + s] = count;
				bord[tr + s][tc + s - 1] = count;
				bord[tr + s][tc + s] = count;
				cover(tr, tc, s, dr, dc); 

				cover(tr, tc + s, s, tr + s - 1, tc + s);
				cover(tr + s, tc, s, tr + s, tc + s - 1);
				cover(tr + s, tc + s, s, tr + s, tc + s);
			}
			else if (dr < (tr + s) && dc >= (tc + s)) then
			{
				count++;
				bord[tr + s - 1][tc + s - 1] = count;
				bord[tr + s][tc + s - 1] = count;
				bord[tr + s][tc + s] = count;
				cover(tr, tc + s, s, dr, dc);

				cover(tr, tc, s, tr + s - 1, tc + s - 1);
				cover(tr + s, tc, s, tr + s, tc + s - 1);
				cover(tr + s, tc + s, s, tr + s, tc + s);
			}
			else if (dr >= (tr + s) && dc < (tc + s)) then
			{
				count++;
				bord[tr + s - 1][tc + s - 1] = count;
				bord[tr + s - 1][tc + s] = count;
				bord[tr + s][tc + s] = count;
				cover(tr + s, tc, s, dr, dc);

				cover(tr, tc, s, tr + s - 1, tc + s - 1);
				cover(tr, tc + s, s, tr + s - 1, tc + s);
				cover(tr + s, tc + s, s, tr + s, tc + s);
			}
			else if (dr >= (tr + s) && dc >= (tc + s)) then
			{
				count++;
				bord[tr + s - 1][tc + s - 1] = count;
				bord[tr + s - 1][tc + s] = count;
				bord[tr + s][tc + s - 1] = count;
				cover(tr + s, tc + s, s, dr, dc);

				cover(tr, tc, s, tr + s - 1, tc + s - 1);
				cover(tr, tc + s, s, tr + s - 1, tc + s);
				cover(tr + s, tc, s, tr + s, tc + s - 1);
			}
		}
	6）源代码
		#include<stdio.h>
		int count = 0, bord[8][8]; 
		void cover(int tr, int tc, int size, int dr, int dc);
		int main()
		{
			int i, j;
			cover(0, 0, 8, 0, 0); 
			for (i = 0; i < 8; i++)
			{
				for (j = 0; j < 8; j++)
					printf("%2d ", bord[i][j]);
				printf("\n");
			}
			return 0;
		}

		void cover(int tr, int tc, int size, int dr, int dc)
		{
			if (size < 2) return;
			int s;
			s = size / 2;
			if (dr < (tr + s) && dc < (tc + s)) 
			{
				count++;
				bord[tr + s - 1][tc + s] = count;
				bord[tr + s][tc + s - 1] = count;
				bord[tr + s][tc + s] = count;
				cover(tr, tc, s, dr, dc); 

				cover(tr, tc + s, s, tr + s - 1, tc + s);
				cover(tr + s, tc, s, tr + s, tc + s - 1);
				cover(tr + s, tc + s, s, tr + s, tc + s);
			}
			else if (dr < (tr + s) && dc >= (tc + s))
			{
				count++;
				bord[tr + s - 1][tc + s - 1] = count;
				bord[tr + s][tc + s - 1] = count;
				bord[tr + s][tc + s] = count;
				cover(tr, tc + s, s, dr, dc);

				cover(tr, tc, s, tr + s - 1, tc + s - 1);
				cover(tr + s, tc, s, tr + s, tc + s - 1);
				cover(tr + s, tc + s, s, tr + s, tc + s);
			}
			else if (dr >= (tr + s) && dc < (tc + s))
			{
				count++;
				bord[tr + s - 1][tc + s - 1] = count;
				bord[tr + s - 1][tc + s] = count;
				bord[tr + s][tc + s] = count;
				cover(tr + s, tc, s, dr, dc);

				cover(tr, tc, s, tr + s - 1, tc + s - 1);
				cover(tr, tc + s, s, tr + s - 1, tc + s);
				cover(tr + s, tc + s, s, tr + s, tc + s);
			}
			else if (dr >= (tr + s) && dc >= (tc + s))
			{
				count++;
				bord[tr + s - 1][tc + s - 1] = count;
				bord[tr + s - 1][tc + s] = count;
				bord[tr + s][tc + s - 1] = count;
				cover(tr + s, tc + s, s, dr, dc);

				cover(tr, tc, s, tr + s - 1, tc + s - 1);
				cover(tr, tc + s, s, tr + s - 1, tc + s);
				cover(tr + s, tc, s, tr + s, tc + s - 1);
			}
		}
	7）试验感想
		使用了分治算法来解决残缺棋盘问题，中间碰见了血多的范围上的问题，但多次debug后解决了这些问题。
	
2.	
	1）试验题目
		假设某社团某一天要 组织n个活动E= {1, 2,3...n}，其中每个活动都要求使用同一礼堂，而且在同一时间内只有-个活动能使用这个礼堂。每个活动i都有一个要求使
		用礼堂的起始时间si和结束时间fi,且有si<fi若区间(si， fi) 和(si, fi)不相交，则称活动i与活动j是相容的。
	2）试验要求
		E  1  2  3  4  5  6  7  8  9  10  11  12
		fi 1  2  0  5  3  5  6  8  8   2  12  15
		si 3  4  5  7  8  9 10 11 12  13  14  18
	3）实验目的
		现在给定n个活动的开始时间和结束时间，请设计一个活动安排方案，使得安排的相容活动数目最多。
	4）思路分析
		可以使用贪心法，以结束时间最早排序，一次选择满足条件的元素
	3）伪代码
		void main() {
			si[13] = { 0,1,2,0,5,3,5,6,8,8,2,12,15 };
			fi[13] = { 0,3,4,5,7,8,9,10,11,12,13,14,18 };
			index = 1,count = 1;
			print(index, si[1], fi[1]);
			for i = 2 to 13
				if (si[i] > fi[index]) then {
					index = i;
					count++;
					print(index, si[index], fi[index]);
				}
			print(count);
		}
	4）源代码
		#include<stdio.h>

		void main() {
			int si[13] = { 0,1,2,0,5,3,5,6,8,8,2,12,15 };
			int fi[13] = { 0,3,4,5,7,8,9,10,11,12,13,14,18 };
			int index = 1,count = 1;
			printf("第%d个活动被安排:%d开始，%d结束.\n", index, si[1], fi[1]);
			for (int i = 2; i < 13; i++)
				if (si[i] > fi[index]) {
					index = i;
					count++;
					printf("第%d个活动被安排:%2d开始,%2d结束\n", index, si[index], fi[index]);
				}
			printf("总计%d个活动被安排",count);
		}
	7）试验感想
		使用了贪心算法，采取了结束时间排序的方法来选择问题，验证后问题正确
	
3.	
	1）试验题目
		假设某社团某一天要 组织n个活动E= {1, 2,3...n}，其中每个活动都要求使用同一礼堂，而且在同一时间内只有-个活动能使用这个礼堂。每个活动i都有一个要求使
		用礼堂的起始时间si和结束时间fi,且有si<fi若区间(si， fi) 和(si, fi)不相交，则称活动i与活动j是相容的。现在给定n个活动的开始时间和结束时间，请设计一
		个活动安排方案，使得安排的相容活动数目最多。
	2）试验要求
		E  1  2  3  4  5  6  7  8  9  10  11  12
		fi 1 12  0  5  6  3  8  5  8   2   2  15
		si 3 14  5  7 10  8 12  9 11  13   4  18
	3）实验目的
		现在给定n个活动的开始时间和结束时间，请设计一个活动安排方案，使得安排的相容活动数目最多。
	4）思路分析
		可以使用贪心法，以结束时间最早排序，一次选择满足条件的元素
	5）伪代码
		void main() {
			si[13] = { 0,1,12,0,5,6,3,8,5,8,2,2,15 };
			fi[13] = { 0,3,14,5,7,10,8,12,9,11,13,4,18 };
			sort[12] = { 1,2,3,4,5,6,7,8,9,10,11,12 };
			for i = 0 to 12 - 1
				for j = 0 to 12 - 1 - i
					if (fi[sort[j]] > fi[sort[j + 1]])  then {
						temp = sort[j];
						sort[j] = sort[j + 1];
						sort[j + 1] = temp;
					}
			index = sort[0],count = 1;
			print(index, si[index], fi[sort[index]]);
			for i = 1 to 12
				if (si[sort[i]] > fi[index])  then{
					index = sort[i];
					count++;
					printt(index, si[index], fi[index]);
				}
			print(count);
		}
	6）源代码
		#include<stdio.h>
		void main() {
			int si[13] = { 0,1,12,0,5,6,3,8,5,8,2,2,15 };
			int fi[13] = { 0,3,14,5,7,10,8,12,9,11,13,4,18 };
			int sort[12] = { 1,2,3,4,5,6,7,8,9,10,11,12 };
			for (int i = 0; i < 12 - 1; i++)
				for (int j = 0; j < 12 - 1 - i; j++)
					if (fi[sort[j]] > fi[sort[j + 1]]) {
						int temp = sort[j];
						sort[j] = sort[j + 1];
						sort[j + 1] = temp;
					}
			int index = sort[0],count = 1;
			printf("第%d个活动被安排:%d开始,%d结束.\n", index, si[index], fi[index]);
			for (i = 1; i < 12; i++)
				if (si[sort[i]] > fi[index]) {
					index = sort[i];
					count++;
					printf("第%d个活动被安排:%d开始,%d结束\n", index, si[index], fi[index]);
				}
			printf("总计%d个活动被安排\n", count);
		}
	7）试验感想
		使用了贪心算法，采取了结束时间排序的方法来选择问题，验证后问题正确