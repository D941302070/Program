3.
	1）题目
		输出对应矩阵
	2）思路
		创建一个对应矩阵，来储存元素，根据规律，可以知道输出顺序为最上边从左到右，右边从上到下……
		由规律可知，总共四种情况。然后分类，分别对每一条边录入；
	3）伪代码
		void printMatrix( ){
			m=1,s=0,p=n;
			while(m<=n*n) do
			{
				for i=s to p do
				{
					if(i==s) then
					{
						for j=s to p do
						{
							a[i][j]=m++;   
						}
					}
					if(i!=s) then
					{
						j=p-1;
						a[i][j]=m++;
					}
					if(i==(p-1)) then
					{
						for j=p-2 to s do
						{
							a[i][j]=m++;
						}
						for i=p-2 to s do
						{
							a[i][j]=m++;
						}
							i=p-1;
					}
				}
				s++;p--;
			}
		}
		
	4）源代码
		#include<stdio.h>
		int a[7][7];
		void printMatrix(int n)
		{
			int i,j;
			int m=1;
			int s=0,p=n;
			while(m<=n*n
			{
				for(i=s;i<p;i++)
				{
					if(i==s)
					{
						for(j=s;j<p;j++)
						{
							a[i][j]=m++;   
						}
					}
					if(i!=s)
					{
						j=p-1;
						a[i][j]=m++;
					}
					if(i==(p-1))
					{
						for(j=p-2;j>=s;j--)
						{
							a[i][j]=m++;
						}
						for(i=p-2,j=s;i>s;i--)
						{
							a[i][j]=m++;
						}
							i=p-1;
					}
				}
				s++;
				p--;
			}
			for(i=0;i<n;i++)
			{
				for(j=0;j<n;j++)
				{
					printf("%4d",a[i][j]);
				}
					printf("\n");
			}
		}
		int main()
		{
			int i,j;
			for(i=0;i<7;i++)
			{
				for(j=0;j<7;j++)
				{
					a[i][j]=0;
				}
			}
			printMatrix(7);
			return 0;
		}
	
11
	1）题目
		请编程求1×2×3×..×n所得的数末尾有多少个0? (n由键盘输人，1000< n <10000)
	2）思路
		因为直接求出结果再看0的话，可能数据无法储存，所以要找到0出现的原因。以为式子为因式，所以通过因式分解
		可以知道0的出现是2和5相乘的结果，又因为5的个数远远小于2，所以因式中5的个数也就是结果末尾0的个数；
	3）伪代码
		void findZero() {
			input(n);
			fiveCount = 0;
			for i = 2 to n do
			{	//找5的倍数
				tem = i;
				while (tem % 5 == 0) do
				{	tem /= 5;
					fiveCount++;}
			}
			print(fiveCount);
		}
	4）源代码
		#include <stdio.h>
		void findZero() 
			int n;
			printf("请输入一个数n(1000<n<10000):\n");
			scanf("%d", &n);
			int fiveCount = 0;
			for (int i = 5; i <= n; i++)
			{
				//找5的倍数
				int tem = i;
				while (tem % 5 == 0)
				{
					tem /= 5;
					fiveCount++;
				}
			}
			printf("该相乘数字的末尾有%d个0",fiveCount);
		}
		int main() {
			findZero();
		}
	
13	
	1）题目
		A,B,C,D,E 5人为某次竞赛的前五名,他们在名次公布前猜名次。
		A说: B得第三名,C得第五名。
		B说: D得第二名,E得第四名。
		C说: B得第一名,E得第四名。
		D说: C得第一名,B得第二名。
		E说: D得第二名,A得第三名。
		结果每个人都猜对了一半,实际名次是什么呢?
	2）思路
		通过多次for循环可以组合出abcde的不同结果，然后假设每一人的一句话正确，判断之后最后输出结果
	3）伪代码
		void truthNum() {
			for a = 1 to 5 do
				for b = 1 to 5 do
					if (b与上层数不相等) then
						for c = 1 to 5 do
							if (c与上层数不相等) then
								for d = 1 to 5 do
									if (d与上层数不相等) then
									{
										e = 15 - a - b - c - d;
										if (e与上层数不相等)then
											if ((((b == 3) + (c == 5)) == 1) && (((d == 2) + (e == 4)) == 1) && (((b == 1) + (e == 4)) == 1) && (((c == 1) + (b == 2)) == 1) && (((d == 2) + (a == 3)) == 1))
											then print(a, b, c, d, e);}
		}
	4）源代码
		#include <stdio.h>
		void truthNum( ){
			int a, b, c, d, e;
			for (a = 1; a <= 5; a = a + 1)
				for (b = 1; b <= 5; b = b + 1)
					if (a != b)
						for (c = 1; c <= 5; c = c + 1)
							if (c != a && c != b)
								for (d = 1; d <= 5; d = d + 1)
					 				if (d != a && d != b && d != c)
										e = 15 - a - b - c - d;
										if (e != a && e != b && e != c && e != d)
											if ((((b == 3) + (c == 5)) == 1) && (((d == 2) + (e == 4)) == 1) && (((b == 1) + (e == 4)) == 1) && (((c == 1) + (b == 2)) == 1) && (((d == 2) + (a == 3)) == 1))
												printf("A是第%d名\nB是第%d名\nC是第%d名\nD是第%d名\nE是第%d名\n", a, b, c, d, e);	
			}
		}
		int main() {
			truthNum();
		}
	
14	
	1）题目
		编写算法求满足以下条件的3位整数n:它是完全平方数，其中又有两位数字相同,如144、676等。
	2）思路
		首先3位数的完全平方数只有100~961，然后在其中将所有的完全平方数找到，并拆分每一位，然后出只有两位相等
	3）伪代码
		void findNum() {
			for i = 10 to 31 do
			{	num = i * i;
				tem = num;
				n1 = num % 10;//个位
				num /= 10;
				n2 = num % 10;//十位
				num /= 10;
				n3 = num;//百位
				if (n1 == n2 || n1 == n3 || n2 == n3) then print(tem);}
		}
	4）源代码
		#include <stdio.h>
		void findNum() {
			int num,i,x,y,z,tem;
			for (int i = 10; i <= 30; i++)
			{
				int num = i * i;
				tem = num;
				int n1 = num % 10;
				num /= 10;
				int n2 = num % 10;
				num /= 10;
				int n3 = num;
				if (n1 == n2 || n3 == n4 || n5 == n6)
				{
					printf("%6d", tem);
				}
			}
			return 0;
			printf("\n");
		}
		int main() {
			findNum();
		}