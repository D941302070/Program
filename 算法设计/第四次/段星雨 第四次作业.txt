9
	1）题目
		利用分治法求一一组数据中最大的两个数和最小的两个数。
	2）思路
		用索引拆分数组，然后分到不可分位置进行比较求出结果
	3）伪代码
		max = -2147483647;
		lowerMax = -2147483647;
		min = 2147483647;
		upperMin = 2147483647;
		void compute(array,a,b) {
			if (array[a] >= array[b]) then{
				temMax = array[a];
				temMin = array[b];
			} then
			else {
				temMax = array[b];
				temMin = array[a];
			}
			if (temMax > max) then{
				lowerMax = max;
				max = temMax;
				if (temMin > lowerMax && temMin != temMax)
					lowerMax = temMin;
			}
			else if (temMax > lowerMax) then
				lowerMax = temMax;

			if (temMin < min) then{
				upperMin = min;
				min = temMin;
				if (temMax < upperMin && temMin != temMax)then
					upperMin = temMax;
			}
			else if (temMax < lowerMax)then
				upperMin = temMin;
		}
		void choose(array,start,end) {
			if (end == start || end - start == 1) then {
				compute(array, start, end);
				return;
			}
			choose(array, start, (start + end) / 2);
			choose(array, (start + end) / 2 + 1, end);
		}
		main() {
			input(n);
			array = (int*)calloc(n + 1, sizeof(int));
			for i = 1 to n do
				input(array[i]);
			choose(array, 1, n);
			print(max);
			print(lowerMax);
			print(min);
			print(upperMin);
		}
	4）源代码
		#include <stdio.h>
		int max = -2147483647;
		int lowerMax = -2147483647;
		int min = 2147483647;
		int upperMin = 2147483647;
		void compute(int* array, int a, int b) {
			int temMax, temMin;
			if (array[a] >= array[b]) {
				temMax = array[a];
				temMin = array[b];
			}
			else {
				temMax = array[b];
				temMin = array[a];
			}
			if (temMax > max) {
				lowerMax = max;
				max = temMax;
				if (temMin > lowerMax && temMin != temMax)
					lowerMax = temMin;
			}
			else if (temMax > lowerMax)
				lowerMax = temMax;

			if (temMin < min) {
				upperMin = min;
				min = temMin;
				if (temMax < upperMin && temMin != temMax)
					upperMin = temMax;
			}
			else if (temMax < lowerMax)
				upperMin = temMin;
		}
		void choose(int* array, int start, int end) {
			if (end == start || end - start == 1) {
				compute(array, start, end);
				return;
			}
			choose(array, start, (start + end) / 2);
			choose(array, (start + end) / 2 + 1, end);
		}
		main() {
			int n;
			printf("请输入要计算的个数：\n");
			scanf("%d", &n);
			int* array;
			array = (int*)calloc(n + 1, sizeof(int));
			printf("请输入数据\n");
			for (int i = 1; i <= n; i++)
				scanf("%d", &array[i]);
			choose(array, 1, n);
			printf("最大数为%d\n",max);
			printf("第二大数为%d\n", lowerMax);
			printf("最小数为%d\n", min);
			printf("第二小数为%d\n", upperMin);
		}
		
10
	1）题目
		利用分治法求一组数据的和。
	2）思路
		用索引拆分数组，然后分到不可分位置进行求和，计算最终结果
	3）伪代码
		sum = 0;
		void add(array,start,end) {
			if (end == start) then{
				sum += array[end]; 
				return;
			}
			add(array, start, (start + end) / 2);
			add(array, (start + end) / 2 + 1, end);
		}
		main() {
			input(n);
			array = (int*)calloc(n + 1, sizeof(int));
			for i = 1 to n do
				input(array[i]);
			add(array, 1, n);
			print(sum);
		}
	4）源代码
		#include <stdio.h>
		int sum = 0;
		void add(int* array, int start, int end) {
			if (end == start) {
				sum += array[end]; 
				return;
			}
			add(array, start, (start + end) / 2);
			add(array, (start + end) / 2 + 1, end);
		}
		main() {
			int n;
			printf("请输入要计算的个数：\n");
			scanf("%d", &n);
			int* array;
			array = (int*)calloc(n + 1, sizeof(int));
			printf("请输入数据\n");
			for (int i = 1; i <= n; i++)
				scanf("%d", &array[i]);
			add(array, 1, n);
			printf("答案为%d\n",sum);
		}
		
	1）题目
		任给两个可相乘的矩阵,求其乘积
	2）思路
		首先录入元素，然后使用三层for循环计算最后结果
	3）伪代码
		matrixA[100][100] = { 0 };
		matrixB[100][100] = { 0 };
		matrixC[100][100] = { 0 };
		aLen, aRow, bLen, bRow;
		void mul() {
			for i = 0 to aLen do
				for j = 0 to bRow do
					for k = 0 to aRow do
						matrixC[i][j] += matrixA[i][k] * matrixB[k][j];
		}
		void record() {
			input(aLen, aRow);
			for i = 0 to aLen do
				for j = 0 to aRow do
					input(matrixA[i][j]);
			input(bLen, bRow);
			for i = 0 to bLen to
				for j = 0 to bRow to
					input(matrixB[i][j]);
			mul();
			for i = 0 to aLen do{
				for j = 0 to bRow do
					print(matrixC[i][j]);
				printf("\n");
			}
		}
	4）源代码
		#include<stdio.h> 
		int matrixA[100][100] = { 0 };
		int matrixB[100][100] = { 0 };
		int matrixC[100][100] = { 0 };
		int aLen, aRow, bLen, bRow;
		void mul() {
			int i, j, k;
			for (i = 0; i < aLen; i++)
				for (j = 0; j < bRow; j++)
					for (k = 0; k < aRow; k++)
						matrixC[i][j] += matrixA[i][k] * matrixB[k][j];
		}
		void record() {
			int i, j;
			printf("请输入A矩阵长宽\n");
			scanf("%d%d", &aLen, &aRow);
			printf("请输入A矩阵\n");
			for (i = 0; i < aLen; i++)
				for (j = 0; j < aRow;j++)
					scanf("%d", &matrixA[i][j]);
			printf("请输入B矩阵长宽\n");
			scanf("%d%d", &bLen, &bRow);
			printf("请输入B矩阵\n");
			for (i = 0; i < bLen; i++)
				for (j = 0; j < bRow; j++)
					scanf("%d", &matrixB[i][j]);
			mul();
			printf("结果为\n");
			for (i = 0; i < aLen; i++){
				for (j = 0; j < bRow; j++)
					printf("%d ", matrixC[i][j]);
				printf("\n");
			}
		}
		void main() {
			record();
		}
	
	
	1）题目
		 皇后问题递归解法
	2）思路
		用一维数组来储存每一行的棋子，然后回溯递归，碰到不满足条件的出局，最终找到最后结果
	3）伪代码
		chess[9] = { 0,0,0,0,0,0,0,0,0 };
		count = 0;
		int Cheak(n) {
			for i = 1 to n do
				if (n - i == abs(chess[n] - chess[i]) || chess[i] == chess[n]) then
					return 0;
			return 1;
		}
		void Print() {
			print(++count);
			for i = 1 to 8 do
			{
				for j = 0 to chess[i] - 1 do print("□");
				print("☆");
				for j = 0 to 8 - chess[i] do print("□");
				print("\n");
			}
		}
		void EightQueens2(int index) {
			for chess[index] = 1 to 8 do
				if (Cheak(index)) then{
					if (index == 8) then{
						Print();
						continue;
					}
					EightQueens2(index + 1);
				}
		}
	4）源代码
		#include<stdio.h> 
		int chess[9] = { 0,0,0,0,0,0,0,0,0 };
		int count = 0;
		int Cheak(int n) {
			for (int i = 1; i < n; i++)
				if (n - i == abs(chess[n] - chess[i]) || chess[i] == chess[n])
					return 0;
			return 1;
		}
		void Print() {
			printf("第%d种情况\n", ++count);
			for (int i = 1; i <= 8; i++)
			{
				for (int j = 0; j < chess[i] - 1; j++) printf("□");
				printf("☆");
				for (int j = 0; j < 8 - chess[i]; j++) printf("□");
				printf("\n");
			}
		}
		void EightQueens2(int index) {
			for (chess[index] = 1; chess[index] <= 8; chess[index]++)
				if (Cheak(index)) {
					if (index == 8) {
						Print();
						continue;
					}
					EightQueens2(index + 1);
				}
		}
		void main() {
			EightQueens2(1);
		}