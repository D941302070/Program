17.
	1）题目
		某一印刷厂有6项加工任务，对印刷车间和装订车间所需时间见表4-11.(时间单位:天)
		任务     J1    J2    J3   J4    J5      J6
		印刷车间 3     12    5    2     9       11
		装订车间 8     10    9    6     3       1
		完成每项任务都要先去印刷车间印刷，再到装订车间装订。问怎样安排这6项加工任
		务的加工工序,使得加工总工时最少。
	2）思路
		 流水调度Johnson算法：Johnson不等式：min{bi,aj}>=min{bj,ai};
		 如果作业i和j满足，则称作业i和j满足Johnson不等式。如果作业i和j不满足Johnson不等式，
		 则交换作业i和j的加工次序后，作业i和j满足Johnson不等式。
	3）伪代吗
		int FlowShop()
		{
			for i = 0 to 6 do
			{
				d[i].key = a[i] > b[i] ? b[i] : a[i];
				d[i].job = a[i] <= b[i];
				d[i].index = i;
			}

			BubbleSort(5);

			j = 0, k = 6 - 1;

			for i = 0 to 6 do
				if (d[i].job) then
					c[j++] = d[i].index;
				else then
					c[k--] = d[i].index;

			j = a[c[0]];
			k = j + b[c[0]];
			for i = 1 to 6 do
			{
				j += a[c[i]];
				k = j < k ? k + b[c[i]] : j + b[c[i]];
			}
			return k;
		}
	4）源代码
		#include<stdio.h>
		typedef struct js {
			int key;
			int index;
			int job;
		}js;
		int a[6] = { 3,12,5,2,9,11 };
		int b[6] = { 8,10,9,6,3,1 };
		int c[6];
		js d[6];

		int FlowShop();
		void BubbleSort(int n);

		int FlowShop()
		{
			for (int i = 0; i < 6; i++)
			{
				d[i].key = a[i] > b[i] ? b[i] : a[i];//按Johnson法则分别取对应的b[i]或a[i]值作为关键字
				d[i].job = a[i] <= b[i];//给符合条件a[i]<b[i]的放入到N1子集标记为1
				d[i].index = i;
			}

			BubbleSort(5);//对数组d按关键字升序进行排序

			int j = 0, k = 6 - 1;

			for (int i = 0; i < 6; i++)
				if (d[i].job)
					c[j++] = d[i].index;//将排过序的数组d，取其中作业序号属于N1的从前面进入
				else
					c[k--] = d[i].index;//属于N2的从后面进入，从而实现N1的非减序排序，N2的非增序排序

			j = a[c[0]];
			k = j + b[c[0]];
			for (int i = 1; i < 6; i++)
			{
				j += a[c[i]];//M1在执行c[i]作业的同时，M2在执行c[i-1]号作业，最短执行时间取决于M1与M2谁后执行完
				k = j < k ? k + b[c[i]] : j + b[c[i]];//计算最优加工时间
			}
			return k;
		}

		//冒泡排序
		void BubbleSort(int n)
		{
			int i, j, flag;
			js temp;

			for (i = 0; i < n; i++) {
				flag = 0;
				for (j = n - 1; j > i; j--) {
					//如果前一个数大于后一个数，则交换  
					if (d[j].key <= d[j - 1].key) {
						temp = d[j];
						d[j] = d[j - 1];
						d[j - 1] = temp;
						flag = 1;
					}
				}
				//如果本次排序没有进行一次交换，则break，减少了执行之间。  
				if (flag == 0) {
					break;
				}
			}
		}
		void main() {
			int minTime = FlowShop();
			printf("最短时间为：%d\n最优编号编号顺序为：",minTime);
			for (int i = 0; i < 6; i++)
			{
				printf("%d ",c[i]+1);
			}
		}
	
19.
	1）题目
		编写用动态规划法求组合数()的算法。
	2）思路
		 C(n,k)=C(n-1,k)+C(n-1,k-1)
	3）伪代吗
		void c(n, k) {
			for i = 1 to n do{
				dp[i][0] = 1;
				dp[i][1] = i;
				dp[i][i] = 1;}
			for i = 2 to n do
				for j = 1 to k do
					if (i > j)
						dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];
		}
	4）源代码
		#include <stdio.h>
		int dp[100][100];
		void c(int n,int k) {
			for (int i = 1; i <= n; i++){
				dp[i][0] = 1;
				dp[i][1] = i;
				dp[i][i] = 1;
			}
			for (int i = 2; i <= n; i++)//n
				for (int j = 1; j <= k; j++)//k
					if (i > j)
						dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];
		}
		void main() {
			int n, k;
			printf("输入n,k\n");
			scanf("%d%d", &n, &k);
			c(n, k);
			printf("%d", dp[n][k]);
		}