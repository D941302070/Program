1.	
	1）题目
		熟悉C语言结构及数组定义。
		编写使用数组和结构解决约瑟夫问题的程序。
		完成多项式相加及相乘问题的程序
	2）思路
		1>约瑟夫问题
			首先录入总人数，和每次出列的次数。再定义两个计数器，一个用来记录总人数，另一个用来记录
			每次找人需要循环的次数。总体通过while控制，结束条件为人出列完成，再在循环里判断情况。
			最后输出出列情况。
		2>多项式相加
			首先定义两个结构体，一个为链表节点，用来存放每次输入的指数和系数，另一个存放两个多项式
			链表的头指针和两个多项式的最大指数。计算加法时创建一个动态数组，索引对应指数，存放系数，
			依次遍历链表做加法，然后输出。
	3）伪代码描述的算法如下：
		1>约瑟夫问题
			void method() {
				count = 0;//记录每次循环次数
				sum = 0;
				index = 0;
				input(m,n);
				for i = 1 to n do
					num[i] = 1;
				print("出列元素顺序为：");
				while (sum != n) do
					{index++;   
					if (index已完成一圈循环) then index = 1;
					if (人未出列) then count++;
					if (计数器找到出列位置) then
					{
						count = 0;
						print(index);  
						num相对应的位置出列;
						出局人数sum自增;   
					}
				}
			}
		2>多项式相加
			typedef struct node {
				coef;//系数
				expon;//指数
				next;//下一个指针
			}node;
			typedef struct data
			{
				aHead;//a的头结点
				aMaxExpon;//a最大指数
				bHead;//b头结点
				bMaxExpon;//b最大指数
			}data;
			int readInKeyboard(node* head ) 
			{//返回最大指数
				int coef, expon,maxExpon = -1;
				node* newNode;
				while (1)  do{
					input(coef);
					if (coef == 9999) then 结束循环；
					input(expon);
					newNode.coef = coef;
					newNode.expon = expon;
					if (新指数大于最大指数)then maxExpon = expon;
					newNode插入链表；
				}
				return maxExpon;
			}
			void PlusIn(node* head,int* sum) {
				p = head.next;
				while (p不是尾节点) do{
					sum[对应指数] += coef;
					p = p.next;
				}
			}
			int* Plus(data* headData) {
				sum分配内存;
				max = max(aMaxExpon, bMaxExpon);
				for i = 0 to max do
					初始化sum[];
				PlusIn(headData->aHead, sum);
				PlusIn(headData->bHead, sum);
				return sum;
			}
			void In(data* headData) {//录入多项式
				aMaxExpon = readInKeyboard(headData->aHead);
				bMaxExpon = readInKeyboard(headData->bHead);
			}
			int main()
			{
				aHead ，bHead, headData初始化，赋初值;
				In(headData);
				sum = Plus(headData);
				max = max(headData->aMaxExpon, headData->bMaxExpon);
				for i = 0 to max do
				{
					if (结果系数不为0)then {
						if (最大指数) then{
							printf(sum[i],'^', i);
							break;
						}
						printf(sum[i],'^', i,'+');
					}
			}
		}
	4）源代码
		1>约瑟夫问题
			#include <stdio.h>
			int num[100];
			/*
			-1，出列，已出列
			1，存在，未出列
			*/
			void method() {
				int i;
				int m, n;
				int count = 0;//记录每次循环次数
				int sum = 0;
				int index = 0;
				printf("请输入总人数 n（n<99),和出列编号 m\n");
				scanf("%d%d", &n, &m);
				for (i = 1; i <= n; i++)
					num[i] = 1;
				printf("出列元素顺序为：");
				while (sum != n)
				{
					index++;   //开始从第一个开始报数
					if (index == n + 1) index = 1;
					if (num[index] == 1) //判断是否出圈了
						count++;
					if (count == m)
					{
						count = 0; //计数器又要从下一个开始报数，置零
						printf(" %d ", index);   //输出出局人数的编号 
						num[index] = -1;  //表示出局了
						sum++;   //出局人数记录 
					}
				}
			}
			int main()
			{
				method();
			}
		2>多项式相加
			#define max(a, b) (((a) > (b)) ? (a) : (b))
			#include <stdio.h>
			typedef struct node {
				int coef;//系数
				int expon;//指数
				struct node* next;
			}node;
			typedef struct data
			{
				struct node* aHead;
				int aMaxExpon;
				struct node* bHead;
				int bMaxExpon;
			}data;
			int readInKeyboard(node* head ) 
			{//返回最大指数
				int coef, expon,maxExpon = -1;
				node* newNode;
				while (1) {
					newNode = (node*)malloc(sizeof(node));
					scanf("%d", &coef);
					if (coef == 9999)
					{
						free(newNode);
						break;
					}
					scanf("%d", &expon);
					newNode->coef = coef;
					newNode->expon = expon;
					if (expon > maxExpon)
						maxExpon = expon;
					newNode->next = head->next;
					head->next = newNode;
				}
				return maxExpon;
			}

			void PlusIn(node* head,int* sum) {
				node* p = head->next;
				while (p != NULL) {
					sum[p->expon] += p->coef;
					p = p->next;
				}
			}
			int* Plus(data* headData) {
				int *sum;
				int max;
				int i;
				max = max(headData->aMaxExpon, headData->bMaxExpon);
				sum = (int*)malloc((max+1) * (sizeof(int)));//动态申请内存
				for (i = 0; i < max+1; i++)
					sum[i] = 0;
				PlusIn(headData->aHead, sum);
				PlusIn(headData->bHead, sum);
				return sum;
			}
			void In(data* headData) {//录入多项式
				printf("请输入多项式a，先输入系数，在输入指数，输入9999停止\n");
				headData->aMaxExpon = readInKeyboard(headData->aHead);
				printf("请输入多项式b，先输入系数，在输入指数，输入9999停止\n");
				headData->bMaxExpon = readInKeyboard(headData->bHead);
			}
			int main()
			{
				data* headData;
				node* aHead = NULL,*bHead = NULL;
				int*sum;
				int i;
				headData = (data*)malloc(sizeof(data));
				headData->aHead = aHead = (node*)malloc(sizeof(node));
				headData->bHead = bHead = (node*)malloc(sizeof(node));
				headData->aHead->next = NULL;
				headData->bHead->next = NULL;
				headData->aMaxExpon = -1;
				headData->bMaxExpon = -1;
				In(headData);
				sum = Plus(headData);
				printf("\n结果为：");
				for (i = 0; i < max(headData->aMaxExpon, headData->bMaxExpon) + 1; i++)
				{
					if (sum[i] != 0) {
						if (i == max(headData->aMaxExpon, headData->bMaxExpon)) {
							printf("%dx^%d", sum[i], i);
							break;
						}
						printf("%dx^%d+", sum[i], i);
					}
			}
		}
	5）调试过程遇到的问题及调试体会
		1>约瑟夫问题
			在调试时碰见的问题是在循环是要跳过出列的索引，并且要注意循环数组的循环情况，
			碰到最后的元素要从头开始。多次调试活解决了数组越界问题。
		2>多项式相加
			遇到的问题为链表储存于读取，还有动态数组的内存分配问题和初始化问题。多次调试后
			解决了对应问题，并合理使用了内存。
3.	
	1）题目
		使用循环与递归两种方法实现1+2+3+4+…+n
	2）思路
		循环：
			使用for循环，每次对全局变量加上下一个值最后输出答案
		递归
			使用函数的返回值，当n为1时直接返回1，当不为1时每次返回当前的n加上n-1调用函数的结果。
			将答案直接返回的主函数并输出。
	3）伪代码描述的算法如下：
		count = 0;
		void methodThree_ONE(int n) {
			//循环实现
			for  i = 1 to  n do
				count += i;
		}
		int methodThree_TWO(int n) {
			//递归实现
			if (n == 1)then return 1;
			else then return n + methodThree_TWO(n - 1);
		}
		void main()
		{
			input(n);
			methodThree_ONE(n);
			print(count);
			end = methodThree_TWO(n);
			print(end);
		}
	4）源代码
		#include <stdio.h>
		int count = 0;
		void methodThree_ONE(int n) {
			//循环实现
			int i;
			for ( i = 1; i <= n; i++)
				count += i;
		}
		int methodThree_TWO(int n) {
			//递归实现
			if (n == 1)
				return 1;
			else 
				return n + methodThree_TWO(n - 1);
		}
		void main()
		{
			int n;
			int end = 0;
			printf("请输入n\n");
			scanf("%d", &n);
			methodThree_ONE(n);
			printf("循环结果为：%d\n", count);
			end = methodThree_TWO(n);
			printf("遍历结果为：%d",end );
		}
	5）调试过程遇到的问题及调试体会
		问题主要出现在递归上，最开始返回值的选取有问题，导致答案不正确。还有在n非常大的时候不能使用递归
		内存会溢出。
	
5.	
	1）题目
		求一个矩阵的鞍点(该点的值在其所在行上最小且在其所在列上最大)
	2）思路
		首先录入矩阵，然后创建两个数组，创建一个标记数组。通过遍历，找到每行每列的最大值，然后储存在两个
		数组中，然后在标记数组中标记每行每列的最大值，最后遍历标记数组，被标记两次的元素就是最终结果。
	3）伪代码描述的算法如下：
		void method() {
			input(m,n);
			for i = 0 to m-1 do
				for j = 0 to n-1 do 
					input(num[i][j]);
			标记数组flag清零；
			for i = 0 to m-1 do
				更新行最小值，并标记；
			for i = 0 to n-1 do
				更新列最大值，并标记；
			printf("靶点为：\n");
			for (i = 0; i < m; i++)
				for (j = 0; j < n; j++)
					if (被标记两次)
						print(num[i][j]);
		}
	4）源代码
		#include <stdio.h>
		void method() {
			int m, i, j, n;
			int hang[10], lie[10];//储存最大值和最小值
			int num[10][10];//储存矩阵
			int flag[10][10];//标记数组
			printf("请输入矩阵的长度m(小于10)，宽度n(小于10)\n");
			scanf("%d%d", &m, &n);
			printf("请输入矩阵\n");

			for (i = 0; i < m; i++)
				for (j = 0; j < n; j++) {
					scanf("%d", &num[i][j]);//录入矩阵
					flag[i][j] = 0;
				}

			for (i = 0; i < m; i++)//选出行最小值
			{
				hang[i] = num[i][0];
				for (j = 1; j < n; j++)
					if (hang[i]>=num[i][j])
						hang[i] = num[i][j];
				for ( j = 0; j < n; j++)
					if (hang[i] == num[i][j])
						flag[i][j] += 1;
			}

			for (i = 0; i < n; i++)//选出列最大值
			{
				lie[i] = num[0][i];
				for (j = 1; j < n; j++)
					if (lie[i] <= num[j][i])
						lie[i] = num[j][i];
				for (j = 0; j < n; j++)
					if (lie[i] == num[j][i])
						flag[i][j] += 1;
			}
			printf("靶点为：\n");
			for (i = 0; i < m; i++)
				for (j = 0; j < n; j++)
					if (flag[i][j] == 2)
						printf("[ %d , %d ] = %d \n",i+1,j+1,num[i][j]);
		}
		int main()
		{
			method();
		}
	5）调试过程遇到的问题及调试体会
		问题主要出现在寻找行与列的最大最小值，最开始想使用排序，但发现太耗时，不如直接挨个比较，直接找到
		目标值并记录。

7.
	1）题目
		全校学生选学生会主席，有五个候选人，编号一到五，每个学生一张选票，只能填写一个人的编号。编程完成
		统计选票的工作
	2）思路
		定义一个数组用来储存每个人票数，在cmd中每输入一个选手编号，就对对应的元素自加，最后遍历输出数组。
	3）伪代码描述的算法如下：
		void method() 
		{
			while (没输入-1) do
			{
				input(num);
				if (num == -1) then
					for i = 0 to 4 do
						print( i + 1, a[i]);
				a[num - 1] ++;
			}
		}
	4）源代码
		#include <stdio.h>
		int a[5] = { 0,0,0,0,0 };
		void method() 
		{
			int num, i = 0;
			printf("请分别输入同学编号，输入-1结束\n");
			while (i != -1)
			{
				scanf("%d", &num);
				if (num == -1)
					for (i = 0; i < 5; i++)
						printf("%d号同学的票数为：%d\n", i + 1, a[i]);
				a[num - 1] ++;
			}
		}
		void main()
		{
			method();
		}
	5）调试过程遇到的问题及调试体会
		主要问题在录入元素上，要判定啥时候输入结束。多次调试使用了输入-1来结束输入，然后输出每个人的票数。
	
9.	
	1）题目
		只有10分,5分, 2分，1分的硬币;顾客付款X分,商品价格y分。问，如何找零钱，使得找的硬币数最少
	2）思路
		首先定义一个数组，存放硬币的面值，录入要找零的数额，然后计算要找钱的总数。要想硬币最少，就要先找
		大面值，知道找不了在换小面值。然后输出找硬币的情况。
	3）伪代码描述的算法如下：
		void method() 
		{
			coin[4] = { 10,5,2,1 };
			input(x,y);
			total = x - y;
			for i = 0 to 3 do
			{
				tmp = total / coin[i];
				print( coin[i], tmp);
				total -= tmp * coin[i];
			}
		}
	4）源代码
		#include <stdio.h>
		void method() 
		{
			int x, y, total, i;
			int tmp;
			int coin[4] = { 10,5,2,1 };
			printf("请输入商品价格y和顾客付款x；\n");
			scanf("%d%d", &y,&x);
			total = x - y;
			printf("应找回%d枚硬币\n",total);
			for ( i = 0; i < 4; i++)
			{
				tmp = total / coin[i];
				printf("\n%d分硬币共%d个", coin[i], tmp);
				total -= tmp * coin[i];
			}
		}
		void main()
		{
			method();
		}
	5）调试过程遇到的问题及调试体会
		问题在每次找完一种面值后，需要更换下次找零的数额，多次调试结局了问题。