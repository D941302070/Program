1.	
	1）题目
		有一个由数字1,2.3,..,.9组成的数字串(长度不超过200),问如何将M(M<20)
		个加号(“+”)插人到这个数字串中,使所形成的算术表达式的值最小。请编写算法解
		个问题。
		注意:加号不能加在数字串的最前面或最末尾，也不应有两个或两个以上的加号相邻
		M保证小于数字串的长度。
		例如:数字串79846 ,若需要加入两个加号,则最佳方案为79+8+46,算术表达式的值
		为133。
	2）思路
		1.回溯
			通过树来查找，依次判断，回溯条件为前x个加号的结果已经比最小值大时，即可回溯
		2.动态规划
			dp(p,x) = min { dp(k,x-1) + num(k,p) } (x<=k<=p-1)
			其中：
			dp(p,0)= num(0,p)
			dp(p,x)表示前p个数字中添上x个加号后得到的最小值 。
			num(x,y)表示数字串索引[x.y)的数 
	3）伪代吗
		1.回溯
			num[201];//储存字符串
			M;//加号个数
			plusIndex[31];//回溯时的加号索引
			len;//字符长度
			min = 0x3f3f3f3f;
			int compute(n,end);//计算n个加号，结束索引为end的结果
			void findResult(m,begin)
			{
				//求结果,m：剩余加号，begin下一个加号生成的开始点,M:括号数
				if (m <= M) then 
				for i = begin to len - m - 1 do
				{plusIndex[M - m + 1] = i;
				//回溯
				if (M == m || compute(M - m, i) < min) then
				{//最后一个括号
				if (m == 1) then
				{//满足结果
					if (compute(M, len) < min) then min = compute(M, len);
					continue;}
				findResult(m - 1, i + 1);}}}
		2.动态规划
			int connectNum(x,y)
			{if (num[x][y] != -1) then return num[x][y];
			num[x][y] = 0;
			for i = x to y do
				num[x][y] = num[x][y] * 10 + numStr[i] - '0';
			return num[x][y];}
			
			int computeDP(p,x)
			{if (dp[p][x] != -1) then
				return dp[p][x];
			if (x == 0) then
			{dp[p][0] = connectNum(0, p);
			return dp[p][0];}
			dp[p][x] = 0x3f3f3f3f;
			for i = p - 1 to x do
				dp[p][x] = min(dp[p][x], computeDP(i, x - 1) + connectNum(i, p));
			return dp[p][x];}
			
	4）源代码
		1.回溯
			#include<stdio.h>
			#include<string.h>
			char num[201];//储存字符串
			int M;//加号个数
			int plusIndex[31];//回溯时的加号索引
			int len;//字符长度
			int min = 0x3f3f3f3f;

			int connectNum(int start, int end);//求索引之间的数之和
			void findResult(int m, int begin);//求结果,m：剩余加号，begin下一个加号生成的开始点
			int compute(int n, int end);//计算n个加号，结束索引为end的结果
			//加号索引如果为1 ，则代表在1,2之间有加号

			void main() 
			{
				printf("请输入加号个数\n");
				scanf("%d", &M);
				printf("请输入数字\n");
				scanf("%s", &num[1]);
				len = strlen(&num[1]);
				findResult(M, 1);
				printf("最小值为：%d\n", min);
			}
			int connectNum(int start, int end)
			{
				//求索引之间的数之和
				int result = 0,i;
				for (i = start; i <= end; i++)
					result = result * 10 + num[i] - '0';
				return result;
			}
			void findResult(int m, int begin)
			{
				//求结果,m：剩余加号，begin下一个加号生成的开始点
				int i;
				if (m <= M)
					for (i = begin; i <= len - m - 1; i++)
					{
						plusIndex[M - m + 1] = i;
						//回溯
						if (M == m || compute(M - m, i) < min)
						{
							//最后一个括号
							if (m == 1) {
								//满足结果
								if (compute(M, len) < min)
									min = compute(M, len);
								continue;
							}
							findResult(m - 1, i + 1);
						}
					}
			}
			int compute(int n, int end)
			{
				//计算n个加号，结束索引为end的结果
				int i,result = 0;
				for (i = 1; i <= n + 1; i++)
				{
					if (i == n + 1) 
						result += connectNum(plusIndex[n] + 1, end);
					else if(i == 1)
						result += connectNum(1, plusIndex[i]);
					else
						result += connectNum(plusIndex[i - 1] + 1, plusIndex[i]);
				}
				return result;
			}
		2.动态规划
			#define min(a, b) (((a) > (b)) ? (b) : (a))
			#include<stdio.h>
			int len;//数字长度
			char numStr[200];//数字串
			int dp[200][200];
			int num[200][200];
			int M;

			int connectNum(int x, int y);//计算num(x,y)
			int computeDP(int p, int x);//计算dp(p,x)

			int main()
			{
				//数组初始化
				memset(dp, -1, sizeof(dp));
				memset(num, -1, sizeof(num));
				printf("请输入加号个数\n");
				scanf("%d", &M);
				printf("请输入数字\n");
				scanf("%s", numStr);
				len = strlen(numStr);
				printf("最小值为：%d", computeDP(len, M));
			}
			int connectNum(int x, int y)
			{
				int i;
				//如果已计算则直接返回数值
				if (num[x][y] != -1)
					return num[x][y];
				num[x][y] = 0;
				for (i = x; i < y; i++)
					num[x][y] = num[x][y] * 10 + numStr[i] - '0';
				return num[x][y];
			}
			int computeDP(int p, int x)
			{
				int i;
				//如果已计算则直接返回数值
				if (dp[p][x] != -1)
					return dp[p][x];
				//dp(p,0)= NUM(0,p)
				if (x == 0)
				{
					dp[p][0] = connectNum(0, p);
					return dp[p][0];
				}
				//dp[p, x] = min{ dp(k,x - 1) + num(k,p) } (x <= k <= p - 1)
				dp[p][x] = 0x3f3f3f3f;
				for (i = p - 1; i >= x; i--)
					dp[p][x] = min(dp[p][x], computeDP(i, x - 1) + connectNum(i, p));
				return dp[p][x];
			}

2.	
	1）题目
		有分数1/2,1/3,1/4,1/5,1/6,1/8,1/10,1/12,1/15,求将其中若干个分数相加和
		恰好为1的组成方案,并打印成等式。	
	2）思路
		通过递归回溯，将每次的结果储存在数组中，回溯条件是：当前选择的数相加结果已大于1
	3）伪代吗
		int* plus(endIndex);//计算结果，endIndex：结束数组索引，返回一个二维数组储存分子和分母
		void compute(start,floor)
		{
			for i = start to 9 do 
			{result[floor] = i;
			tem = plus(floor);
			if ((float)tem[0] / tem[1] < 1.0) then compute(i + 1, floor + 1);
			else if ((float)tem[0] / tem[1] == 1.0) then print(floor);}}
	4）源代码
		#include<stdio.h>
		int num[9] = { 2,3,4,5,6,8,10,12,15 };
		int result[9];//储存结果索引

		void compute(int start, int floor);//start：开始索引，floor：当前加数的个数
		int* plus(int endIndex);//计算结果，endIndex：结束数组索引，返回一个二维数组储存分子和分母
		void print(int floor);//打印result前floor索引的结果,

		void main()
		{
			//初始化数组
			memset(result, -1, sizeof(result));
			compute(0, 0);
		}
		void compute(int start, int floor)
		{
			int i, *tem;
			for (i = start; i < 9;i++)
			{
				result[floor] = i;
				tem = plus(floor);
				if ((float)tem[0] / tem[1] < 1.0)
					compute(i + 1, floor + 1);
				else if ((float)tem[0] / tem[1] == 1.0)
					print(floor);
			}
		}
		int* plus(int endIndex) 
		{
			int reNum[2] = { 1,num[result[0]] }, i;
			for (i = 1; i <= endIndex; i++)
			{
				reNum[0] = reNum[0] * num[result[i]] + reNum[1]; //分子
				reNum[1] *= num[result[i]];//分母
			}
			return reNum;
		}
		void print(int floor) 
		{
			int i;
			for (i = 0; i <= floor; i++)
			{
				printf(" 1/%d ", num[result[i]]);
				if (i < floor) printf("+");
			}
			printf("= 1\n");
		}
		
3.	
	1）题目
		是否存在一个由1~9组成的9位数,每个数字只能出现-一次，且这个9位数由高
		位到低位前i位能被i整除。
	2）思路
		9层for循环，组合出每种情况，再在每次选择下一位时回溯判断，回溯条件：
		不满足整除或有存在数字相同
	3）伪代吗
		void findNum()
		{
			for result[1] = 1 to 9 do
			 for result[2] = 1 to 9 do
			  if (cheak(2)) then
			   for result[3] = 1 to 9 do
			    if (cheak(3)) then
			     for result[4] = 1 to 9 do
			      if (cheak(4)) then
			       for result[5] = 1 to 9 do
			         if (cheak(5)) then
			          for result[6] = 1 to 9 do
			           if (cheak(6)) then
			            for result[7] = 1 to 9 do
			             if (cheak(7)) then
			              for result[8] = 1 to 9 do
			               if (cheak(8)) then
			                for result[9] = 1 to 9 do
			                 if (cheak(9)) then
			                  print();}
	4）源代码
		#include<stdio.h>
		int result[10];

		void findNum();//找结果
		int cheak(int n);//检查回溯
		void print();//打印结果

		void main()
		{
			findNum();
		}
		void findNum()
		{
			for (result[1] = 1; result[1] <= 9; result[1]++)
				for (result[2] = 1; result[2] <= 9; result[2]++)
					if (cheak(2))
						for (result[3] = 1; result[3] <= 9; result[3]++)
							if (cheak(3))
								for (result[4] = 1; result[4] <= 9; result[4]++)
									if (cheak(4))
										for (result[5] = 1; result[5] <= 9; result[5]++)
											if (cheak(5))
												for (result[6] = 1; result[6] <= 9; result[6]++)
													if (cheak(6))
														for (result[7] = 1; result[7] <= 9; result[7]++)
															if (cheak(7))
																for (result[8] = 1; result[8] <= 9; result[8]++)
																	if (cheak(8))
																		for (result[9] = 1; result[9] <= 9; result[9]++)
																			if (cheak(9))
																				print();
		}
		int cheak(int n)
		{
			int num = 0, i;
			for (i = 1; i < n; i++)
			{
				if (result[n] == result[i])
					return 0;
				num = num * 10 + result[i];
			}
			num = num * 10 + result[n];
			return num % n == 0;
		}
		void print()
		{
			int i;
			for (i = 1; i <= 9; i++)
				printf("%d",result[i]);
			printf("\n");
		}
	
4.	
	1）题目
		一个整数n(n≤100)可以有多种分划,分划整数之和为n。
		输人: n=6
		6
		5 1
		4 2
		4 1 1
		3 3
		3 2 1
		3 1 1 1
		2 2 2
		2 2 1 1
		2 1 1 1 1
		1 1 1 1 1 1
		total=11 {表示分划数有11种}
		求n的分划数。
	2）思路
		1.只算总数
			动态规划：
				fun(n,m)=fun(n,m-1)+fun(n-m,m)
				fun(n,m),表示整数n的任何加数都不超过m分划的数目
			其中：
				fun(n,n)=1 + fun(n,n-1)
				n的任何加数都不超过n，等价于它本身加上n的任何加数都不超过n-1
				fun(n,1)=1
				对n划分成不大于一的数，等价于全部划分为1
				fun(1,m)=1
				对1划分等价于它本身
		2.结果和总数
			回溯：依次判断下次划分的最大值，DFS划分
	3）伪代吗
		1.只算总数
			int DP(n,m) 
			{if (dp[n][m] != -1) then return dp[n][m];
				//fun(1,m)=1，fun(n,1)=1
				if (n == 1 || m == 1)then{dp[n][m] = 1;return dp[n][m];}
				else if (n < m) then{return DP(n, n);}
				else if (n == m) then {return 1 + DP(n, n - 1);}
				else then return DP(n, m - 1) + DP(n - m, m);}
		2.结果和总数
			void sum(int i) {
				if (m - n[i] < n[i]) then {
					//下次划分的最大值小于n[i]
					m = m - n[i];n[i + 1] = m;i++;n[i + 1] = 0;}
				else {
					//下次划分的最大值大于n[i]，则n[i + 1]最大值只能为n[i]
					n[i + 1] = n[i];m -= n[i];i++;}
				//下次划分不可以直接结束
				if (m != n[i]) then sum(i);
				//下次划分可以直接结束
				else then output_sum();

				//下次划分的最大值大于1时，则依次减一进行下下次划分
				if (n[i] > 1)  then{n[i]--;sum(i);}
				else  then{
					//不满足划分条件，回溯，指针倒退回上一层，划分结果重新并入m
					while ((n[i] == 1) && (i > 0)) do {i--;m += n[i];}
					if (i != 0) then {n[i]--;sum(i);}}}
	4）源代码
		1.只算总数
			#include<stdio.h>
			int dp[100][100];
			int n;

			int DP(int n, int m);//

			void main()
			{
				memset(dp, -1, sizeof(dp));
				printf("请输入n:\n");
				scanf("%d", &n);
				printf("total = %d\n",DP(n,n));
			}
			int DP(int n, int m) {
				if (dp[n][m] != -1)
					return dp[n][m];
				//fun(1,m)=1，fun(n,1)=1
				if (n == 1 || m == 1)
				{
					dp[n][m] = 1;
					return dp[n][m];
				}
				//拆分
				if (n == m) 
					return 1 + DP(n, n - 1);
				else
					return DP(n, m - 1) + DP(n - m, m);
			}
		2.结果和总数
			#include<stdio.h>
			int n[1000], m, k, total = 1;
			void output_sum() {
				int i;
				total++;
				for (i = 0; n[i] != 0; i++)
					printf("%d ", n[i]);
				printf("\n");
			}
			void sum(int i) {
				if (m - n[i] < n[i]) {
					//下次划分的最大值小于n[i]
					m = m - n[i];
					n[i + 1] = m;
					i++;
					n[i + 1] = 0;
				}
				else {
					//下次划分的最大值大于n[i]，则n[i + 1]最大值只能为n[i]
					n[i + 1] = n[i];
					m -= n[i];
					i++;
				}

				//下次划分不可以直接结束
				if (m != n[i])
					sum(i);
				//下次划分可以直接结束
				else
					output_sum();

				//下次划分的最大值大于1时，则依次减一进行下下次划分
				if (n[i] > 1) {
					n[i]--;
					sum(i);
				}
				else {
					//不满足划分条件，回溯，指针倒退回上一层，划分结果重新并入m
					while ((n[i] == 1) && (i > 0)) {
						i--;
						m += n[i];
					}
					if (i != 0) {
						n[i]--;
						sum(i);
					}
				}
			}
			void main() {
				int i;
				printf("请输入n:\n");
				scanf("%d", &n[0]);
				printf("划分结果为: \n%d\n", n[0]);
				//k为要划分的数，m为每次进入sum函数是要划分的数
				m = k = n[0];
				for (i = 1; i <= k; i++)
					n[i] = 0;
				//n[0]为第一个数，每次由大到小递减，确定每次划分的最大数
				while (n[0] != 1) {
					n[0]--;
					sum(0);
					m = k;
				}
				printf("total = %d\n", total);
			}