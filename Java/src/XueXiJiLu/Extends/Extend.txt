
在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式：

直接通过子类对象访问成员变量：
    等号左边是谁，就优先用谁，没有则向上找。
间接通过成员方法访问成员变量：


局部变量：         直接写成员变量名
本类的成员变量：    this.成员变量名
父类的成员变量：    super.成员变量名

方法重载
1.在同一个类中
2.方法名相同，参数列表不同（顺序、个数、类型）
3.返回值，访问修饰符任意
4.与方法的参数名无关
方法重写
1.有继承关系的子类
2.方法名相同，参数列表相同（顺序、个数、类型）方法返回值相同
3.与方法参数名无关
4.重写后的访问修饰符只能比父类的权限大

在父子类的继承关系当中，创建子类对象，访问成员方法的规则：
    创建的对象是谁，就优先用谁，如果没有则向上找。

注意事项：
无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找子类的。

重写（Override）
概念：在继承关系当中，方法的名称一样，参数列表也一样。

重写（Override）：方法的名称一样，参数列表【也一样】。覆盖、覆写。
重载（Overload）：方法的名称一样，参数列表【不一样】。

方法的覆盖重写特点：创建的是子类对象，则优先用子类方法。


方法覆盖重写的注意事项：

1. 必须保证父子类之间方法的名称相同，参数列表也相同。
@Override：写在方法前面，用来检测是不是有效的正确覆盖重写。
这个注解就算不写，只要满足要求，也是正确的方法覆盖重写。

2. 子类方法的返回值必须【小于等于】父类方法的返回值范围。
小扩展提示：java.lang.Object类是所有类的公共最高父类（祖宗类），java.lang.String就是Object的子类。

3. 子类方法的权限必须【大于等于】父类方法的权限修饰符。
小扩展提示：public > protected > (default) > private
备注：(default)不是关键字default，而是什么都不写，留空。


 * public：任何地方均可访问
 * protected：只能在同包中，跨包子类中访问
 *    默认：只能在同包中使用
 * private：这能在当前类中访问



继承关系中，父子类构造方法的访问特点：

1. 子类构造方法当中有一个默认隐含的“super()”调用，所以一定是先调用的父类构造，后执行的子类构造。
2. 子类构造可以通过super关键字来调用父类重载构造。
3. super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。
总结：
子类必须调用父类构造方法，不写则赠送super()；写了则用写的指定的super调用，super只能有一个，还必须是第一个。


 * 与父类相同的参数也可以重写定义
 * super可以在子类中调用父类中方法重写前的方法或是参数
 *super关键字的用法有三种：
  1. 在子类的成员方法中，访问父类的成员变量。
  2. 在子类的成员方法中，访问父类的成员方法。
  3. 在子类的构造方法中，访问父类的构造方法。
 * 注：1.父类的构造方法不可被继承，不可被重写
 * 2.子类默认调用父类的无参构造方法，可通过super()访问父类的其他方法
 * 3.使用super()调用父类的构造方法时，必须在有效代码的第一行
 * 4.this和super都不可以在静态方法中调用
 * 5.this和super调用无参构造方法时只能使用一条语句




 * Object类中的方法：
 *
 * equals：
 * 1.继承Object中的equals方法时，比较的是两个引用是否转向一同一个对象
 * 2.子类可以通过从谢equals方法的形式，改变比较的内容
 *
 * toString:
 * 1.输出对象名时，默认会直接调用类中的toString
              * 2.继承Object中的toString方法时，输出对象的字符串表示形式：类型信息+@+地址信息
 *
 * getClass:
 * 1.返回对象的哈希代码值
 *
 * hashCode：
 * 1.获取当前类对象所属的类信息，返回Class对象
 *
 * final：
 * final class：该类无子类
 * final 方法：该方法无法被子类重写，但是可以被子类正常继承使用
 * final 方法内局部变量
 * final 类成员属性：赋值过程：1.定义直接初始化 2.构造方法 3.构造代码块
 * final 引用类型变量：初始化后不可在指向另一个对象，但对象内容可变
 * final static：全局不容许修订内容
 * 注：final不可修饰构造方法
